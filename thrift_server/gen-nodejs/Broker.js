//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./visualizer_types');
//HELPER FUNCTIONS AND STRUCTURES

var Broker_initialize_args = function(args) {
  this.initData = null;
  if (args) {
    if (args.initData !== undefined && args.initData !== null) {
      this.initData = new ttypes.Init(args.initData);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field initData is unset!');
    }
  }
};
Broker_initialize_args.prototype = {};
Broker_initialize_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.initData = new ttypes.Init();
        this.initData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Broker_initialize_args.prototype.write = function(output) {
  output.writeStructBegin('Broker_initialize_args');
  if (this.initData !== null && this.initData !== undefined) {
    output.writeFieldBegin('initData', Thrift.Type.STRUCT, 1);
    this.initData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Broker_initialize_result = function(args) {
};
Broker_initialize_result.prototype = {};
Broker_initialize_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Broker_initialize_result.prototype.write = function(output) {
  output.writeStructBegin('Broker_initialize_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Broker_publishIteration_args = function(args) {
  this.itData = null;
  if (args) {
    if (args.itData !== undefined && args.itData !== null) {
      this.itData = new ttypes.Iteration(args.itData);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field itData is unset!');
    }
  }
};
Broker_publishIteration_args.prototype = {};
Broker_publishIteration_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.itData = new ttypes.Iteration();
        this.itData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Broker_publishIteration_args.prototype.write = function(output) {
  output.writeStructBegin('Broker_publishIteration_args');
  if (this.itData !== null && this.itData !== undefined) {
    output.writeFieldBegin('itData', Thrift.Type.STRUCT, 1);
    this.itData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Broker_publishIteration_result = function(args) {
};
Broker_publishIteration_result.prototype = {};
Broker_publishIteration_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Broker_publishIteration_result.prototype.write = function(output) {
  output.writeStructBegin('Broker_publishIteration_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Broker_getInitData_args = function(args) {
};
Broker_getInitData_args.prototype = {};
Broker_getInitData_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Broker_getInitData_args.prototype.write = function(output) {
  output.writeStructBegin('Broker_getInitData_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Broker_getInitData_result = function(args) {
  this.success = null;
  this.noData = null;
  if (args instanceof ttypes.NoDataException) {
    this.noData = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Init(args.success);
    }
    if (args.noData !== undefined && args.noData !== null) {
      this.noData = args.noData;
    }
  }
};
Broker_getInitData_result.prototype = {};
Broker_getInitData_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Init();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.noData = new ttypes.NoDataException();
        this.noData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Broker_getInitData_result.prototype.write = function(output) {
  output.writeStructBegin('Broker_getInitData_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.noData !== null && this.noData !== undefined) {
    output.writeFieldBegin('noData', Thrift.Type.STRUCT, 1);
    this.noData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Broker_getIterations_args = function(args) {
};
Broker_getIterations_args.prototype = {};
Broker_getIterations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Broker_getIterations_args.prototype.write = function(output) {
  output.writeStructBegin('Broker_getIterations_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Broker_getIterations_result = function(args) {
  this.success = null;
  this.noData = null;
  if (args instanceof ttypes.NoDataException) {
    this.noData = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.IterationBundle(args.success);
    }
    if (args.noData !== undefined && args.noData !== null) {
      this.noData = args.noData;
    }
  }
};
Broker_getIterations_result.prototype = {};
Broker_getIterations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.IterationBundle();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.noData = new ttypes.NoDataException();
        this.noData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Broker_getIterations_result.prototype.write = function(output) {
  output.writeStructBegin('Broker_getIterations_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.noData !== null && this.noData !== undefined) {
    output.writeFieldBegin('noData', Thrift.Type.STRUCT, 1);
    this.noData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BrokerClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
BrokerClient.prototype = {};
BrokerClient.prototype.seqid = function() { return this._seqid; };
BrokerClient.prototype.new_seqid = function() { return this._seqid += 1; };
BrokerClient.prototype.initialize = function(initData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_initialize(initData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_initialize(initData);
  }
};

BrokerClient.prototype.send_initialize = function(initData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('initialize', Thrift.MessageType.ONEWAY, this.seqid());
  var params = {
    initData: initData
  };
  var args = new Broker_initialize_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
BrokerClient.prototype.publishIteration = function(itData, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_publishIteration(itData);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_publishIteration(itData);
  }
};

BrokerClient.prototype.send_publishIteration = function(itData) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('publishIteration', Thrift.MessageType.ONEWAY, this.seqid());
  var params = {
    itData: itData
  };
  var args = new Broker_publishIteration_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
BrokerClient.prototype.getInitData = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getInitData();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getInitData();
  }
};

BrokerClient.prototype.send_getInitData = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getInitData', Thrift.MessageType.CALL, this.seqid());
  var args = new Broker_getInitData_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BrokerClient.prototype.recv_getInitData = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Broker_getInitData_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.noData) {
    return callback(result.noData);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getInitData failed: unknown result');
};
BrokerClient.prototype.getIterations = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getIterations();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getIterations();
  }
};

BrokerClient.prototype.send_getIterations = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getIterations', Thrift.MessageType.CALL, this.seqid());
  var args = new Broker_getIterations_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BrokerClient.prototype.recv_getIterations = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Broker_getIterations_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.noData) {
    return callback(result.noData);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getIterations failed: unknown result');
};
var BrokerProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
BrokerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
BrokerProcessor.prototype.process_initialize = function(seqid, input, output) {
  var args = new Broker_initialize_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.initialize(args.initData);
}
;
BrokerProcessor.prototype.process_publishIteration = function(seqid, input, output) {
  var args = new Broker_publishIteration_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.publishIteration(args.itData);
}
;
BrokerProcessor.prototype.process_getInitData = function(seqid, input, output) {
  var args = new Broker_getInitData_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getInitData.length === 0) {
    Q.fcall(this._handler.getInitData.bind(this._handler))
      .then(function(result) {
        var result_obj = new Broker_getInitData_result({success: result});
        output.writeMessageBegin("getInitData", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NoDataException) {
          result = new Broker_getInitData_result(err);
          output.writeMessageBegin("getInitData", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getInitData", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getInitData(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NoDataException) {
        result_obj = new Broker_getInitData_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getInitData", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getInitData", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BrokerProcessor.prototype.process_getIterations = function(seqid, input, output) {
  var args = new Broker_getIterations_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getIterations.length === 0) {
    Q.fcall(this._handler.getIterations.bind(this._handler))
      .then(function(result) {
        var result_obj = new Broker_getIterations_result({success: result});
        output.writeMessageBegin("getIterations", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.NoDataException) {
          result = new Broker_getIterations_result(err);
          output.writeMessageBegin("getIterations", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getIterations", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getIterations(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.NoDataException) {
        result_obj = new Broker_getIterations_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getIterations", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getIterations", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
